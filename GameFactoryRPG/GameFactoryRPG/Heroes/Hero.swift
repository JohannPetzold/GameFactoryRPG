import Foundation

class Hero {
    //MARK: Propri√©t√©s
    var name: String
    var hp: Int
    // A modifier
    var weapon: Weapon
    var jobName: String
    var totalDamage: Int
    var totalHeal: Int
    var totalDamageReceived: Int
    var totalHealReceived: Int
    
    //MARK: Init
    init(name: String) {
        self.name = name
        hp = HP_MAX
        weapon = Weapon()
        jobName = ""
        totalDamage = 0
        totalHeal = 0
        totalDamageReceived = 0
        totalHealReceived = 0
    }
    
    //MARK: M√©thodes
    // Change les statistiques de l'armes par celles de la nouvelle
    func swapWeapon(newWeapon: Weapon) {
        weapon.changeStats(newWeapon: newWeapon)
        print(name + " s'√©quipe de la nouvelle arme")
        displayHero()
        Thread.sleep(forTimeInterval: 1)
    }
    
    // R√©ception du montant de d√©g√¢ts
    func getDamage(damage: Int) {
        print(name + " prend \(damage) d√©g√¢ts")
        // Ajout du montant aux statistiques
        totalDamageReceived += damage
        Thread.sleep(forTimeInterval: 1)
        // Diminution des points de vie
        hp = hp - damage
        // Si les d√©g√¢ts descendent les points de vie √† 0 ou en dessous
        if hp <= 0 {
            print(name + " est mort ‚ò†Ô∏è")
            hp = 0
        }
        displayHero()
        Thread.sleep(forTimeInterval: 1)
    }
    
    // R√©ception du montant du soin
    func getHeal(heal: Int) {
        print(name + " regagne \(heal) points de vie")
        // Ajout du montant aux statistiques
        totalHealReceived += heal
        Thread.sleep(forTimeInterval: 1)
        // Ajout des points de vie
        hp += heal
        // Si le montant augmente les points de vie au-dessus du montant maximum
        if hp > HP_MAX {
            hp = HP_MAX
        }
        displayHero()
        Thread.sleep(forTimeInterval: 1)
    }
    
    // Ajoute le montant des d√©g√¢ts aux statistiques
    func addTotalDamage(_ damage: Int) {
        totalDamage += damage
    }
    
    // Ajout le montant des soins aux statistiques
    func addTotalHeal(_ heal: Int) {
        totalHeal += heal
    }
    
    // Affichage du Champion
    func displayHero() {
        displayName()
        displayHp()
        print(" | " + weapon.weaponEmoji + " " + weapon.getDiceDamage(), terminator: "")
        print(" - üíä " + weapon.getDiceHeal())
    }
    
    // Affichage du Champion √† la fin de la partie
    func displayHeroAtEnd() {
        displayName()
        print(weapon.weaponEmoji + " " + weapon.getDiceDamage(), terminator: "")
        print(" - üíä " + weapon.getDiceHeal())
        print(weapon.weaponEmoji + " D√©g√¢ts " + weapon.weaponEmoji + " ", terminator: "")
        print("Inflig√©s : \(totalDamage) - Re√ßus : \(totalDamageReceived)")
        print("üíä Soins üíä Prodigu√©s : \(totalHeal) - Re√ßus : \(totalHealReceived)")
    }
    
    private func displayName() {
        print(name + " | " + jobName + " | ", terminator: "")
    }
    
    // Affichage de la barre de vie
    private func displayHp() {
        var count = 0
        print("\(hp)/\(HP_MAX) [", terminator: "")
        if hp > 0 {
            while count < HP_MAX {
                count += HP_MAX / 10
                if count < hp + (HP_MAX / 10) {
                    if hp <= HP_MAX.getPercentage(20) {
                        print("üî¥", terminator: "")
                    } else if hp <= HP_MAX.getPercentage(40) {
                        print("üü†", terminator: "")
                    } else if hp <= HP_MAX.getPercentage(60) {
                        print("üü°", terminator: "")
                    } else {
                        print("üü¢", terminator: "")
                    }
                } else {
                    print("‚ö™Ô∏è", terminator: "")
                }
            }
        } else {
            while count <= HP_MAX {
                print("‚ö´Ô∏è", terminator: "")
                count += (HP_MAX / 10)
            }
        }
        print("]", terminator: "")
    }
}

