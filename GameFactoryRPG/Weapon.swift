import Foundation

class Weapon {
    //MARK: PropriÃ©tÃ©s
    var dice: Int
    var baseDamage: Int
    var diceHeal: Int
    var baseHeal: Int

    //MARK: Init
    init() {
        // DÃ©finition des statistiques de base
        dice = 3
        baseDamage = 6
        diceHeal = 3
        baseHeal = 6
    }
    
    //MARK: MÃ©thodes
    // GÃ©nÃ¨re alÃ©atoirement les dÃ©gÃ¢ts et les soins de l'arme
    func randomStats() {
        dice = Int.random(in: 1...6)
        baseDamage = Int.random(in: 2...8) * 2
        diceHeal = Int.random(in: 1...6)
        baseHeal = Int.random(in: 2...6) * 2
    }
    
    // Modifie les statistiques de l'arme par celles de la nouvelle
    func changeStats(newWeapon: Weapon) {
        dice = newWeapon.dice
        baseDamage = newWeapon.baseDamage
        diceHeal = newWeapon.diceHeal
        baseHeal = newWeapon.baseHeal
    }
    
    // GÃ©nÃ¨re les dÃ©gÃ¢ts de maniÃ¨re alÃ©atoire en simulant un jet de dÃ©s
    func randomDamage() -> Int {
        let damage = dice * Int.random(in: 1...baseDamage)
        print("ðŸŽ² \(dice)d\(baseDamage) : ", terminator: "")
        Thread.sleep(forTimeInterval: 1)
        print("\(damage) ðŸŽ²")
        Thread.sleep(forTimeInterval: 1)
        return damage
    }
    
    // GÃ©nÃ¨re les soins de maniÃ¨re alÃ©atoire en simulant un jet de dÃ©s
    func randomHeal() -> Int {
        let heal = diceHeal * Int.random(in: 1...baseHeal)
        print("ðŸŽ² \(diceHeal)d\(baseHeal) : ", terminator: "")
        Thread.sleep(forTimeInterval: 1)
        print("\(heal) ðŸŽ²")
        Thread.sleep(forTimeInterval: 1)
        return heal
    }
    
    // Renvoi l'affichage du jet de dÃ©s en String
    func getDiceDamage() -> String {
        return "\(dice)d\(baseDamage)"
    }
    
    // Renvoi l'affichage du jet de dÃ©s en String
    func getDiceHeal() -> String {
        return "\(diceHeal)d\(baseHeal)"
    }
}
